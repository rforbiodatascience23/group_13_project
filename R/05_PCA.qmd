---
title: "05 PCA"
subtitle: "R for Bio Data Science"
format: html
author: All
date: "2023-11-15"
editor: visual
---

## Load libraries

```{r}
library("tidyverse")
library("ggrepel")
library("broom")
library("here")
library("readxl")
library("patchwork")
source(here("R/99_proj_func.R"))
```

## Load data

```{r}
# Load data
meta_and_expression <- read_tsv(here("data/03_dat_augment.tsv"))
```

## PCA

Exploration of the transcripts data in PCA space

### Computing PCA

```{r}
# Subset data to expression data
input_pca <- meta_and_expression |>
  select(-c(1:33))


# Run pca
pca_fit <- log2(input_pca + 1) |>
  prcomp()
```

### Labels generation for PCA

Creating labels for PC and variances explanation

```{r}
# Crate labels for axis 
pca_plot_axes_labels <- pca_fit |>
  tidy("eigenvalues") |>
  mutate(
    lbl = str_c("PC", PC, ", Variance = ", 
                 round(percent*100,2),
                 "%")) |> 
  pull("lbl")

# Printing labels
pca_plot_axes_labels |>
  head(2)
```

### Exploring metadata in PCA space

Create function to plot each metadata feature in 2d PCA

```{r}
# Function to plot in PCA space
pca_meta_data <- function(to_plot) {
  plot_pca_ethnicity <- pca_fit |>
    augment(meta_and_expression)  |>
    ggplot(aes(x = .fittedPC1,
               y = .fittedPC2)) + 
    geom_point(aes_string(color = to_plot),
               size = 3,) +
    theme_half_open(12) +
    background_grid()+
    geom_vline(xintercept = 0) +
    geom_hline(yintercept = 0) +
    labs(title = "PCA: Patient clusters by Trancripts",
         x = pluck(pca_plot_axes_labels, 1),
         y = pluck(pca_plot_axes_labels, 2),
         caption = "Data from doi.org/10.1038/s42003-021-01842-7")+
    theme(plot.caption.position = "plot")
 
 plot_pca_ethnicity
}
```

Plotting all features in PCA space

```{r}
# Plot samples against all metadata features
for (metadata_feature in colnames(meta_and_expression[2:32])) {
  print(pca_meta_data(metadata_feature))
}
```

We found that none of the original metadata feature explains anything in the PCA space.

#### Plotting an example of no explainability in PCA space using survival time feature 

```{r}
plot_survival_pca <- pca_fit |>
  augment(meta_and_expression) |>
  filter(!is.na(survival_time)) |>
  ggplot(
    aes(
      x = .fittedPC1,
      y = .fittedPC2,
    )
  ) +
  geom_point(
    aes_string(
      color = "survival_time"
    ),
    size = 3
  ) +
  theme_half_open(12) +
  background_grid() +
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  labs(
    title = "PCA: Patient clusters by Trancripts",
    x = pluck(pca_plot_axes_labels, 1),
    y = pluck(pca_plot_axes_labels, 2),
    color = "survival Time",
    caption = "Data from doi.org/10.1038/s42003-021-01842-7"
  ) +
  theme(plot.caption.position = "plot")

ggsave(filename = here("results/05_PCA_survival_feature.png"),
       plot = plot_survival_pca)

plot_survival_pca
```

#### 4 plots

```{r}
plot_pca_one_feature_1 <- pca_fit |>
  augment(meta_and_expression) |> 
  filter(!is.na(survival_time)) |>
  ggplot(
    aes(
      x = .fittedPC1,
      y = .fittedPC2, )) + 
  geom_point(
    aes_string(
      color =   "survival_time"),
    size = 3) +
  theme_half_open(12) +
  background_grid()+
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  labs(
    title = "PCA: Paitiens clusters by Trancripts",
    x = pluck(pca_plot_axes_labels, 1),
    y = pluck(pca_plot_axes_labels, 2),
    color = "Survival Catagory",
    caption = "Data from doi.org/10.1038/s42003-021-01842-7")+
  theme(plot.caption.position = "plot")


plot_pca_one_feature_2 <- pca_fit |>
  augment(meta_and_expression) |> 
  filter(!is.na(sex)) |>
  ggplot(
    aes(
      x = .fittedPC1,
      y = .fittedPC2, )) + 
  geom_point(
    aes_string(
      color =   "sex"),
    size = 3) +
  theme_half_open(12) +
  background_grid()+
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  labs(
    title = "PCA: Paitiens clusters by Trancripts",
    x = pluck(pca_plot_axes_labels, 1),
    y = pluck(pca_plot_axes_labels, 2),
    color = "Survival Catagory",
    caption = "Data from doi.org/10.1038/s42003-021-01842-7")+
  theme(plot.caption.position = "plot")


plot_pca_one_feature_3 <- pca_fit |>
  augment(meta_and_expression) |> 
  filter(!is.na(smoking_status)) |>
  ggplot(
    aes(
      x = .fittedPC1,
      y = .fittedPC2, )) + 
  geom_point(
    aes_string(
      color =   "smoking_status"),
    size = 3) +
  theme_half_open(12) +
  background_grid()+
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  labs(
    title = "PCA: Paitiens clusters by Trancripts",
    x = pluck(pca_plot_axes_labels, 1),
    y = pluck(pca_plot_axes_labels, 2),
    color = "Survival Catagory",
    caption = "Data from doi.org/10.1038/s42003-021-01842-7")+
  theme(plot.caption.position = "plot")

plot_pca_one_feature_4 <- pca_fit |>
  augment(meta_and_expression) |> 
  filter(!is.na(smoking_history_pack_years)) |>
  ggplot(
    aes(
      x = .fittedPC1,
      y = .fittedPC2, )) + 
  geom_point(
    aes_string(
      color =   "smoking_history_pack_years"),
    size = 3) +
  theme_half_open(12) +
  background_grid()+
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  labs(
    title = "PCA: Paitiens clusters by Trancripts",
    x = pluck(pca_plot_axes_labels, 1),
    y = pluck(pca_plot_axes_labels, 2),
    color = "Survival Catagory",
    caption = "Data from doi.org/10.1038/s42003-021-01842-7")+
  theme(plot.caption.position = "plot")

combined <- plot_pca_one_feature_1 + plot_pca_one_feature_2 +  
  plot_pca_one_feature_3 + plot_pca_one_feature_4 + plot_layout(ncol = 2)

ggsave(
  filename = here("results/05_PCA_4_feature.png"),
  plot = combined
)

combined
```

### Eigenvalue

```{r}
eigen_explained <- pca_fit |>
  tidy("pcs") |>
  slice_head(n = 10) |>
  mutate(percent = round(percent * 100, digits = 2)) |>
  ggplot(aes(
    x = PC,
    y = percent
  )) +
  geom_col(
    colour = "black",
    fill = "#000099",
    alpha = 0.5
  ) +
  geom_text(aes(label = percent),
    vjust = 1.2,
    colour = "black",
    size = 5,
    fontface = "bold"
  ) +
  geom_hline(yintercept = 0) +
  scale_x_continuous(breaks = c(1:10)) +
  theme_bw(base_size = 20) +
  labs(
    title = "Eigenvalues for variance explaination",
    caption = "Data from doi.org/10.1038/s42003-021-01842-7",
    y = "Explained variance (%)"
  ) +
  theme(
    panel.grid.minor.x = element_blank(),
    panel.grid.major.x = element_blank(),
    plot.caption = element_text(size = 10)
  )

eigen_explained
```

### Plotting transcripts with eigenvectors in PCA space

```{r}
arrow_style <- arrow(
  angle = 20, ends = "first", type = "closed", length = grid::unit(8, "pt")
)


# plot rotation matrix
transcripts_in_pca <- pca_fit |>
  tidy(matrix = "rotation") |>
  pivot_wider(names_from = "PC", names_prefix = "PC", values_from = "value") |>
  slice(1:10) |>
  mutate(
    column = str_remove_all(column, "_NM_.*")) |>
  ggplot(aes(PC1, PC2)) +
  geom_segment(xend = 0, yend = 0, arrow = arrow_style) +
  geom_text_repel(
    aes(label = column),
    color = "#904C2F"
  ) +
  xlim(-0.1, .1) + ylim(-.1, .1) +
  
  theme_minimal_grid(12)

ggsave(
  filename = here("results/05_PCA_feature.png"),
  plot = transcripts_in_pca
)

transcripts_in_pca
```

### Plots of hierarchical clusters in PCA

```{r}
plot_pca_clusters <- pca_fit |>
  augment(meta_and_expression) |>
  ggplot(
    aes(
      x = .fittedPC1,
      y = .fittedPC2,
      colour = sample_cluster)) + 
  geom_point(
    size = 3
    ) +
  theme_half_open(12) +
  background_grid()+
  geom_vline(
    xintercept = 0
    ) +
  geom_hline(
    yintercept = 0
    ) +
  labs(
    title = "PCA of Trancripts expression",
    subtitle = "Cluster of patients based on selected trancripts",
    x = pluck(pca_plot_axes_labels, 1),
    y = pluck(pca_plot_axes_labels, 2),
    shape = "Pantient HC",
    color = "Samle by HC clustering",
    caption = "Data from doi.org/10.1038/s42003-021-01842-7"
    ) +
  theme(
    plot.caption.position = "plot",
    ) +
  scale_colour_discrete(
    labels = c("Cluster 1", "Cluster 2", "Cluster 3","Cluster 4")
  ) 


ggsave(
  filename = here("results/05_PCA_cluster.png"),
  plot = plot_pca_clusters
)

plot_pca_clusters
```

### Explore the clusters

#### Cluster with point plot

```{r}
# Select 4 transcripts based on min and max values in 
four_transcripts <- pca_fit |>
  tidy(matrix = "rotation") |>
  pivot_wider(names_from = "PC", names_prefix = "PC", values_from = "value") |>
  filter(PC1 == min(PC1) | 
         PC1 == max(PC1) | 
         PC2 == min(PC2) | 
         PC2 == max(PC2)  )

four_transcripts


mean_data_pca2 <- meta_and_expression |>
  group_by(sample_cluster)|>
  summarise(mean_GNG8_NM_033258 = mean(GNG8_NM_033258),
            mean_NHLH1_NM_005598 = mean(NHLH1_NM_005598),
            mean_PALM_NM_001040134 = mean(PALM_NM_001040134),
            mean_KCNQ2_NM_172109 = mean(KCNQ2_NM_172109),
            mean_NPTX2_NM_002523 = mean(NPTX2_NM_002523))|>
    pivot_longer(
    cols = -sample_cluster,
    names_to = "trancrips",
    values_to = "expression"
  )

plot_DET_point_cluster <- mean_data_pca2 |> 
  ggplot( 
       aes(
         sample_cluster,
         expression,
         group = trancrips)) +
  geom_point(
    aes(
      color = trancrips ))+
  geom_line(
    aes(
      color = trancrips
    ))
plot_DET_point_cluster

ggsave(
  filename = here("results/05_PCA_DET_pointplot_cluster.png"),
  plot = plot_DET_point_cluster
)
```

#### DET cluster PC1

```{r}

trancrip_to_plot <- pca_fit |>
  tidy(matrix = "rotation") |>
  pivot_wider(names_from = "PC", names_prefix = "PC", values_from = "value") |>
  arrange(desc(PC1))|>
  select(column)|>
  slice(1:5)|>
  pull()

trancrip_to_plot <- four_transcripts

mean_data_pca1 <- meta_and_expression |>
  group_by(sample_cluster)|>
  select(trancrip_to_plot)|>
    pivot_longer(
    cols = -sample_cluster,
    names_to = "trancrips",
    values_to = "expression"
  )

plot_boxplot_pc1_cluster <- mean_data_pca1 |>
  ggplot( 
       aes(
         sample_cluster,
         log10(expression),
         fill = trancrips,
         dodge = trancrips)) +
  stat_boxplot(
    geom ='errorbar') +
  geom_boxplot() +
    scale_x_discrete(
        labels = c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4")
        ) +
  labs(
    title = "Transcript expression across Clusters",
    x = "Patient cluters by HC",
    y = "Trancript Expression log10",
    fill = "Transcripts",
    caption = "Data from doi.org/10.1038/s42003-021-01842-7"
    ) +
  theme(
    plot.caption.position = "plot",
    ) +
  ylim(-2,4)

ggsave(
  filename = here("results/05_PCA_DET_boxplot_pc1_cluster.png"),
  plot = plot_boxplot_pc1_cluster
)

plot_boxplot_pc1_cluster
```

## compare in genes

### load gene data

```{r}
data_all <- read_tsv(here("data/02_dat_clean.tsv"))
```

```{r}
expression_data <- data_all |>
  select(sample_id, 30:ncol(data_all))

# Convert expression data into long format
expr_long <- expression_data |>
  pivot_longer(
    cols = -c(sample_id, ),
    names_to = "gene",
    values_to = "expr_level"
  )

cluster <- data |>
  select(sample_id,sample_cluster)

trancrip_to_plot <- pca_fit |>
  tidy(matrix = "rotation") |>
  pivot_wider(names_from = "PC", names_prefix = "PC", values_from = "value") |>
  arrange(desc(PC1))|>
  select(column)|>
  slice(1:5)|>
  pull()

gene_to_select = str_remove_all(trancrip_to_plot, "_NM_.*")

to_plot <- expr_long|>
 mutate(
    gene = str_remove_all(gene, "_NM_.*")
    ) |>
  group_by(sample_id,gene)|>
  summarise(
    expr_level = sum(expr_level)
    )|>
  ungroup()|> 
  left_join(cluster)|>
  group_by(sample_cluster)|>
  pivot_wider(
    names_from = gene,
   values_from = expr_level
  )|>
  ungroup()|>
  group_by(sample_cluster)|>
  select(gene_to_select)|>
    pivot_longer(
    cols = -sample_cluster,
    names_to = "trancrips",
    values_to = "expression"
  )






```

```{r}

plot_boxplot_pc1_cluster_gene <- to_plot |>
  ggplot( 
       aes(
         sample_cluster,
         log10(expression),
         fill = trancrips,
         dodge = trancrips)) +
  stat_boxplot(
    geom ='errorbar') +
  geom_boxplot() +
    scale_x_discrete(
        labels = c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4")
        ) +
  labs(
    title = "Trancript express acroos Clusters",
    x = "Pantien cluters by HC",
    y = "Trancript Expression log10",
    fill = "Trancrips",
    caption = "Data from doi.org/10.1038/s42003-021-01842-7"
    ) +
  theme(
    plot.caption.position = "plot",
    ) +
  ylim(-6,4)

plot_boxplot_pc1_cluster

plot_boxplot_pc1_cluster+plot_boxplot_pc1_cluster_gene
```

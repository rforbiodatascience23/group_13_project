---
title: "05 PCA"
subtitle: "R for Bio Data Science"
format: html
author: All
date: "2023-11-15"
editor: visual
---

## Load libraries

```{r}
library("tidyverse")
library("ggrepel")
library("broom")
library("here")
library("readxl")
library("patchwork")
source(here("R/99_proj_func.R"))
```

## Load data

```{r}
# Load data
meta_and_expression <- read_tsv(here("data/03_dat_augment.tsv"))
```

## PCA

Exploration of the transcripts data in PCA space

### Computing PCA

```{r}
# Subset data to expression data
input_pca <- meta_and_expression |>
  select(-c(1:33))

# Run pca
pca_fit <- log2(input_pca + 1) |>
  prcomp()
```

### Labels generation for PCA

Creating labels for PC and variances explanation

```{r}
# Crate labels for axis
pca_plot_axes_labels <- pca_fit |>
  tidy("eigenvalues") |>
  mutate(
    lbl = str_c(
      "PC", PC, ", Variance = ",
      round(percent * 100, 2),
      "%"
    )
  ) |>
  pull("lbl")

# Printing labels
pca_plot_axes_labels |>
  head(2)
```

### Exploring metadata in PCA space

Create function to plot each metadata feature in 2d PCA

```{r}
# Function to plot in PCA space
pca_meta_data <- function(to_plot) {
  plot_pca_ethnicity <- pca_fit |>
    augment(meta_and_expression) |>
    ggplot(aes(
      x = .fittedPC1,
      y = .fittedPC2
    )) +
    geom_point(aes_string(color = to_plot),
      size = 3,
    ) +
    geom_vline(xintercept = 0) +
    geom_hline(yintercept = 0) +
    labs(
      title = "PCA: Patient clusters by Trancripts",
      x = pluck(pca_plot_axes_labels, 1),
      y = pluck(pca_plot_axes_labels, 2),
      caption = "Data from DOI: https://doi.org/10.1038/nature14664"
    ) +
    theme(plot.caption.position = "plot") +
    theme_minimal()

  return(plot_pca_ethnicity)
}
```

Plotting all features in PCA space

```{r}
#| eval: false
# Plot samples against all metadata features
for (metadata_feature in colnames(meta_and_expression[2:32])) {
  print(pca_meta_data(metadata_feature))
}
```

We found that none of the original metadata feature explains anything in the PCA space.

#### Plotting an example of no explainability in PCA space using survival time feature 

```{r}
plot_survival_pca <- pca_fit |>
  augment(meta_and_expression) |>
  filter(!is.na(survival_time)) |>
  ggplot(
    aes(
      x = .fittedPC1,
      y = .fittedPC2,
    )
  ) +
  geom_point(
    aes_string(
      color = "survival_time"
    ),
    size = 3
  ) +
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  labs(
    title = "Patient clustered by Survival",
    x = pluck(pca_plot_axes_labels, 1),
    y = pluck(pca_plot_axes_labels, 2),
    color = "Survival Categories",
    caption = "Data from DOI: https://doi.org/10.1038/nature14664"
  ) +
  theme(plot.caption.position = "plot") +
  theme_minimal()

ggsave(
  filename = here("results/05_PCA_survival_feature.png"),
  plot = plot_survival_pca
)
# Print plot
plot_survival_pca
```

#### 4 plots

```{r}
plot_pca_one_feature_1 <- pca_fit |>
  augment(meta_and_expression) |>
  filter(!is.na(survival_time)) |>
  ggplot(
    aes(
      x = .fittedPC1,
      y = .fittedPC2,
    )
  ) +
  geom_point(
    aes_string(
      color = "survival_time"
    ),
    size = 3
  ) +
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  labs(
    title = "Patients clustered by Survival",
    x = pluck(pca_plot_axes_labels, 1),
    y = pluck(pca_plot_axes_labels, 2),
    color = "Survival Catagory",
  ) +
  theme_minimal() +
  theme(
    plot.caption.position = "plot",
    text = element_text(size = 22)
  )

# Print plot
plot_pca_one_feature_1

plot_pca_one_feature_2 <- pca_fit |>
  augment(meta_and_expression) |>
  mutate(sex = str_to_title(sex)) |>
  filter(!is.na(sex)) |>
  ggplot(
    aes(
      x = .fittedPC1,
      y = .fittedPC2,
    )
  ) +
  geom_point(
    aes_string(
      color = "sex"
    ),
    size = 3
  ) +
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  labs(
    title = "Patients clustered by Gender",
    x = pluck(pca_plot_axes_labels, 1),
    y = pluck(pca_plot_axes_labels, 2),
    color = "Gender"
  ) +
  theme_minimal() +
  theme(
    plot.caption.position = "plot",
    text = element_text(size = 22)
  )

# Print plot
plot_pca_one_feature_2

plot_pca_one_feature_3 <- pca_fit |>
  augment(meta_and_expression) |>
  mutate(smoking_status = str_to_title(smoking_status)) |>
  filter(!is.na(smoking_status)) |>
  ggplot(
    aes(
      x = .fittedPC1,
      y = .fittedPC2,
    )
  ) +
  geom_point(
    aes_string(
      color = "smoking_status"
    ),
    size = 3
  ) +
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  labs(
    title = "Patients clustered by Smoking",
    x = pluck(pca_plot_axes_labels, 1),
    y = pluck(pca_plot_axes_labels, 2),
    color = "Smoking Catagory"
  ) +
  theme_minimal() +
  theme(
    plot.caption.position = "plot",
    text = element_text(size = 22)
  )

# Print plot
plot_pca_one_feature_3

plot_pca_one_feature_4 <- pca_fit |>
  augment(meta_and_expression) |>
  filter(!is.na(smoking_history_pack_years)) |>
  ggplot(
    aes(
      x = .fittedPC1,
      y = .fittedPC2,
    )
  ) +
  geom_point(
    aes_string(
      color = "smoking_history_pack_years"
    ),
    size = 3
  ) +
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  labs(
    title = "Patients clustered by Smoking Habits",
    x = pluck(pca_plot_axes_labels, 1),
    y = pluck(pca_plot_axes_labels, 2),
    color = "Number of Smoked \nPacks of Cigarettes",
    caption = "Data from DOI: https://doi.org/10.1038/nature14664"
  ) +
  theme_minimal() +
  theme(
    plot.caption.position = "plot",
    text = element_text(size = 22)
  )

# Print plot
plot_pca_one_feature_4

combined <- plot_pca_one_feature_1 + plot_pca_one_feature_2 +
  plot_pca_one_feature_3 + plot_pca_one_feature_4 + plot_layout(ncol = 2) &
  theme_minimal() &
  theme(
    plot.caption.position = "plot",
    text = element_text(size = 22)
  )

ggsave(
  filename = here("results/05_PCA_4_feature.png"),
  plot = combined,
  height = 12,
  width = 18
)

combined
```

### Eigenvalue

```{r}
eigen_explained <- pca_fit |>
  tidy("pcs") |>
  slice_head(n = 10) |>
  mutate(percent = round(percent * 100, digits = 2)) |>
  ggplot(aes(
    x = PC,
    y = percent
  )) +
  geom_col(
    colour = "black",
    fill = "#000099",
    alpha = 0.5
  ) +
  geom_text(aes(label = percent),
    vjust = 1.2,
    colour = "black",
    size = 5,
    fontface = "bold"
  ) +
  geom_hline(yintercept = 0) +
  scale_x_continuous(breaks = c(1:10)) +
  theme_bw(base_size = 20) +
  labs(
    title = "Eigenvalues for variance explaination",
    caption = "Data from DOI: https://doi.org/10.1038/nature14664",
    y = "Explained variance (%)"
  ) +
  theme_minimal() +
  theme(
    panel.grid.minor.x = element_blank(),
    panel.grid.major.x = element_blank(),
    plot.caption = element_text(size = 10)
  )

ggsave(
  filename = here("results/05_PCA_var_explained.png"),
  plot = eigen_explained,
  height = 10,
  width = 12
)

eigen_explained

```

### Plotting transcripts with eigenvectors in PCA space

```{r}
arrow_style <- arrow(
  angle = 20, ends = "first", type = "closed", length = grid::unit(8, "pt")
)

# Select transcripts differentiating samples along PC1
pca_1_features <- pca_fit |>
  tidy(matrix = "rotation") |>
  pivot_wider(names_from = "PC", names_prefix = "PC", values_from = "value") |>
  select(column, PC1, PC2) |>
  arrange(desc(abs(PC1))) |>
  slice(1:13) |>
  pull(column)

# Plot rotation matrix
transcripts_in_pca <- pca_fit |>
  tidy(matrix = "rotation") |>
  pivot_wider(names_from = "PC", names_prefix = "PC", values_from = "value") |>
  select(column, PC1, PC2) |>
  filter(column %in% pca_1_features) |>
  mutate(
    column = str_remove_all(column, "_NM_.*")
  ) |>
  ggplot(aes(PC1, PC2)) +
  geom_segment(xend = 0, yend = 0, arrow = arrow_style) +
  geom_text_repel(
    aes(label = column),
    color = "#904C2F"
  ) +
  scale_x_continuous(limits = c(-0.2, 0.2)) +
  scale_y_continuous(limits = c(-0.2, 0.2)) +
  labs(
    caption = "Data from DOI: https://doi.org/10.1038/nature14664"
  ) +
  theme_minimal() +
  theme(text = element_text(size = 20))

ggsave(
  filename = here("results/05_PCA_feature.png"),
  plot = transcripts_in_pca
)

transcripts_in_pca
```

### Plots of hierarchical clusters in PCA

```{r}
plot_pca_clusters <- pca_fit |>
  augment(meta_and_expression) |>
  ggplot(
    aes(
      x = .fittedPC1,
      y = .fittedPC2,
      colour = sample_cluster
    )
  ) +
  geom_point(
    size = 3
  ) +
  geom_vline(
    xintercept = 0
  ) +
  geom_hline(
    yintercept = 0
  ) +
  labs(
    title = "PCA of Trancripts Expression",
    subtitle = "Cluster of patients based on selected trancripts",
    x = pluck(pca_plot_axes_labels, 1),
    y = pluck(pca_plot_axes_labels, 2),
    color = "HC clustering"
  ) +
  theme_minimal() +
  theme(
    plot.caption.position = "plot",
    legend.position = "bottom",
    text = element_text(size = 20)
  ) +
  scale_colour_discrete(
    labels = c("Cluster 1", "Cluster 2")
  )


ggsave(
  filename = here("results/05_PCA_cluster.png"),
  plot = plot_pca_clusters
)

plot_pca_clusters

combined <- plot_pca_clusters + transcripts_in_pca &
  theme_minimal() &
  theme(
    plot.caption.position = "plot",
    legend.position = "bottom",
    text = element_text(size = 20)
  )
ggsave(
  filename = here("results/05_PCA_side_by_side_cluster_feature.png"),
  plot = combined,
  height = 7.5, width = 12
)
```

### Explore the clusters


#### DET cluster PC1

```{r}
# Plot gene expression of differentiating transcripts
plot_boxplot_pc1_cluster <- meta_and_expression |>
  select(sample_cluster, pca_1_features[1:3], pca_1_features[13]) |>
  pivot_longer(
    cols = -sample_cluster,
    names_to = "transcripts",
    values_to = "expression"
  ) |>
  group_by(transcripts, sample_cluster) |>
  ggplot(aes(x = sample_cluster, y = expression, fill = transcripts)) +
  geom_boxplot(width = 0.5) +
  geom_jitter(
    color = "black",
    width = 0.15,
    alpha = 0.5,
    size = 1,
    show.legend = FALSE
  ) +
  scale_x_discrete(
    labels = c("Cluster 1", "Cluster 2")
  ) +
  facet_wrap(~transcripts, scales = "free") +
  labs(
    title = "Transcript Expression across Clusters",
    x = "Patient cluters by Hierarchical Clustering",
    y = "Transcript Expression",
    fill = "Transcripts",
    caption = "Data from DOI: https://doi.org/10.1038/nature14664"
  ) +
  scale_y_log10(
    labels = scales::trans_format("log10", scales::math_format(10^.x))
  ) +
  theme_minimal() +
  theme(
    legend.position = "none",
    text = element_text(size = 20)
  ) +
  scale_fill_brewer(palette = "Set3")


ggsave(
  filename = here("results/05_PCA_DET_boxplot_pc1_cluster.png"),
  plot = plot_boxplot_pc1_cluster,
  width = 10,
  height = 10
)

plot_boxplot_pc1_cluster

```

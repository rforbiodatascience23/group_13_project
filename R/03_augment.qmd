---
title: "03 Augment data"
subtitle: "R for Bio Data Science"
format: html
author: All
date: "2023-11-15"
editor: visual
---

## Load libraries

```{r}
library('tidyverse')
library("here")
source(here("R/99_proj_func.R"))
```

## Load data

```{r}
# Load data
expression_data <- read_tsv(here("data/transcript.tsv"))
```

## Nest expression data

```{r}
expression_data |>
  head(10) -> data_head
```

## Log transform expression data with log2(1 + FPKM)

```{r}
log_row <- function(row_values, pseudo_count = 0) {
  log(pseudo_count + row_values)
}

expr_log <- data_head |>
  group_by(sample_id) |>
  nest() |>
  mutate(data = map(.x = data,
                    .f = ~log_row(row_values = .x,
                                  pseudo_count = 1))) |>
  unnest(data) |>
  ungroup()
```

## Transpose data to have transcript per row

```{r}
expr_log_trans <- expr_log |>
  group_by(sample_id) |>
  pivot_longer(-sample_id,
              names_to = "transcript_id") |>
  pivot_wider(names_from = sample_id,
   values_from = value) |>
  ungroup() |>
  head(10)
```

## Filter away transcripts with only zeros

```{r}
expr_log_trans_no_zero <- expr_log_trans |>
  filter(!if_all(starts_with("S"), ~ . == 0))
```

## Perform k-means clustering for each transcript expression data

```{r}
# Function to perform k-means clustering on a single row
cluster_row <- function(row, k) {
  row_data <- row
  cluster_result <- kmeans(row_data, centers = k, algorithm = "Lloyd")
  return(cluster_result$cluster)
}

# Clustering the expression levels for each transcript
# into two groups (low and high expression)
cluster_data <- expr_log_trans_no_zero |>
  group_by(transcript_id) |>
  nest() |>
  ungroup() |>
  mutate(cluster_int = map(.x = data,
                           ~cluster_row(unlist(.x), k=2))) |>
  select(transcript_id, cluster_int) |>
  unnest_wider(cluster_int)
```

## Find which transcripts have at least 6 expression values in each cluster

```{r}
clustered_longer <- cluster_data |>
  pivot_longer(cols = starts_with("S"),
               names_to = "sample_id",
               values_to = "c_int")

# Count number of expression values in each cluster
# for all transcripts and select transcript with with
# more than 6 in each group
clustered_longer |>
  group_by(transcript_id) |>
  summarise(n_c1 = sum(case_when(c_int == 1 ~ 1,
                                TRUE ~ 0)),
            n_c2 = sum(case_when(c_int == 2 ~ 1,
                                 TRUE ~ 0))) |>
  filter(n_c1 >= 3 & n_c2 >=3) |>
  view()
```

## Extract clustering and centers from kmeans results

```{r}
# Get all values from kmean_results
clustered_data_extract <- clustered_data |>
  mutate(
    cluster = map(kmean_results, "cluster"),
    centers = map(kmean_results, "centers"),
    size = map(kmean_results, "size"),
    iter = map(kmean_results, "iter"),
    withinss = map(kmean_results, "withinss")
  )

# Extract centers and count number of values in each state
clustered_data_extract <- clustered_data_extract |>
  mutate(center1 = map_dbl(.x = centers, 
                           .f = ~.x[1]),
         center2 = map_dbl(.x = centers, 
                           .f = ~.x[2]),
         state1_n = map(.x = cluster, 
                        .f = ~sum(.x == 1)),
         state2_n = map(.x = cluster, 
                        .f = ~sum(.x == 2)))
```

Check at least 6 samples in each

```{r}
data |>
  group_by(Sample_id) |>
  count()
```

Find 69 with expression samples which also has genome sequencing data log2(1 + FPKM) (probably transformed already in from excel sheet)

Search for high and low expression characteristics over the samples

\* Divided each transcript into two groups (states) via k-means clustering

\* Only transcripts with at least 6 samples in each state should are continued with

\* having a state-average fold change larger than 3

-   avg(max(state_averages)) / average(min(state_averages)) \> 3

---
title: "03 Augment data"
subtitle: "R for Bio Data Science"
format: html
author: All
date: "2023-11-15"
editor: visual
---

## Load libraries

```{r}
library("tidyverse")
library("here")
library("readxl")
library("tidyclust")
library("tidymodels")
source(here("R/99_proj_func.R"))
```

## Load data

```{r}
# Load data
data <- read_tsv(here("data/02_dat_clean.tsv"))
```

## Add catagorial features from data

### Add catagorial progresstion

Add colums of progression as catagorical from a contiunes variable

```{r}
# adds cataorical colum surviral based on how many months a person survived.
# adds after meta data colums to keep structor of meta - gene data
data <- data |>
  mutate(
    survival = case_when(
      overall_survival_months < 6 ~ "Terrible",
      overall_survival_months < 12 ~ "Bad",
      overall_survival_months < 36 ~ "Decent",
      overall_survival_months < 60 ~ "Good",
      overall_survival_months >= 60 ~ "Great"
    ),
    .after = overall_survival_months
  )

# View changes
data |>
  select(overall_survival_months, survival)
```

### Add categorical survival status

```{r}
# Make the survival status variable numeric
data <- data |>
  mutate(
    survival_status = case_when(
      status_at_time_of_last_follow_up == "dead" ~ 0,
      status_at_time_of_last_follow_up == "alive" ~ 1
    ),
    .after = status_at_time_of_last_follow_up
  )

# View changes
data |>
  select(status_at_time_of_last_follow_up, survival_status)
```

## Feature selection

### Get expression data from all data

```{r}
# Find sample id and trancript express
expression_data <- data |> 
  select(1, 32:ncol(data))
```

### Log transform expression data with log2(1 + FPKM)

```{r}
log_row <- function(row_values, pseudo_count = 0) {
  log2(pseudo_count + row_values)
}

expr_log <- expression_data |>
  group_by(sample_id) |>
  nest() |>
  mutate(data = map(.x = data,
                    .f = ~log_row(row_values = .x,
                                  pseudo_count = 1))) |>
  unnest(data) |>
  ungroup()
```

### Transpose data to have transcript per row

```{r}
expr_log_trans <- expr_log |>
  group_by(sample_id) |>
  pivot_longer(-sample_id,
              names_to = "transcript_id") |>
  pivot_wider(names_from = sample_id,
   values_from = value) |>
  ungroup()
```

### Filter away transcripts with only zeros

```{r}
expr_log_trans_no_zero <- expr_log_trans |>
  filter(!if_all(starts_with("S"), ~ . == 0))
```

### Perform k-means clustering for each transcript expression data

```{r}
# Function to perform k-means clustering on a single row
cluster_row <- function(row, k) {
  row_data <- row
  cluster_result <- kmeans(row_data, centers = k, algorithm = "Lloyd")
  return(list(cluster = cluster_result$cluster, centers = cluster_result$centers))
}

# Clustering the expression levels for each transcript
# into two groups (low and high expression)
cluster_data <- expr_log_trans_no_zero |>
  group_by(transcript_id) |>
  nest() |>
  ungroup() |>
  mutate(cluster_data = map(.x = data,
                           ~cluster_row(unlist(.x), k=2)))

cluster_tidy <- cluster_data |>
  mutate(cluster = map(cluster_data, "cluster"),
         centers = map(cluster_data, "centers")) |>
  unnest_wider(cluster) |>
  unnest_wider(centers) |>
  select(-c(data, cluster_data)) |>
  rename(cluster_1 = '1',
         cluster_2 = '2')
```

### Find which transcripts have at least 6 expression values in each cluster

```{r}
# Select transcripts with a state fold change of > 3
fold_change <- function(val_1, val_2){
  fold_change <- max(val_1, val_2) - min(val_1, val_2)
  return(fold_change)
}

above_state_fold <- cluster_tidy |>
  mutate(fold_change = map2(.x = cluster_1,
                            .y = cluster_2,
                            .f = ~fold_change(val_1 = .x,
                                              val_2 = .y))) |>
  filter(!fold_change == Inf) |>
  filter(fold_change > 3)

# Pivot longer for grouping by transcripts and cluster groupings
above_state_fold_long <- above_state_fold |>
  pivot_longer(cols = starts_with("S"),
               names_to = "sample_id",
               values_to = "cluster_int")


# Count number of expression values in each cluster
# for all transcripts and select transcript with with
# more than 6 in each group
selected_transcripts <- above_state_fold_long |>
  group_by(transcript_id) |>
  summarise(n_c1 = sum(case_when(cluster_int == 1 ~ 1,
                                TRUE ~ 0)),
            n_c2 = sum(case_when(cluster_int == 2 ~ 1,
                                 TRUE ~ 0))) |> 
  filter(n_c1 >= 6 & n_c2 >= 6) |>
  pull(transcript_id)
```

### Save selected transcripts expression data to csv

```{r}
selected_transcript_expr <- expr_log_trans |>
  filter(transcript_id %in% selected_transcripts)


```

### save transcript express

```{r}
selected_transcript_expr |>
  write_tsv(here("data/06_selected_transcript_expr.tsv"))
```

### save transcript express

```{r}
selected_transcript_expr |>
  write_tsv(here("data/06_selected_transcript_expr.tsv"))
```

### Join meta data

```{r}
# Transpose trancript to samples on rows
transposed_trancripts <- selected_transcript_expr|>
  pivot_longer(-transcript_id,
   names_to = "sample_id") |>
  pivot_wider(names_from = transcript_id,
   values_from = value)
```

```{r}

meta_data_seleted_trancripts <- data |>
  select(c(1:31)) |>
  left_join(transposed_trancripts,
            by = join_by(sample_id))

```

## Add Clusters to samples

Perform clustering of the gene/trancripts express to see which samples might be form a subtype of cancer. The clustering will be performed using the tidyclust packages.

```{r}
# First define how to cluster
# num_cluster are the numbers of clsuters to be formed
# Linage_mehtod is which method the formations of clusted should be based on.
hc_data <- meta_data_seleted_trancripts |>
  select(-c(1:31))

hc_spec <- hier_clust(
  num_clusters = 4,
  linkage_method = "ward.D"
)


# sub set data for computing
hc_data <- log2(hc_data+1) 


hc_spec_fit <- hc_spec |>
  fit(~., data = hc_data)

# hc_spec_fit$fit |> plot()

assigned_clusteres <- extract_cluster_assignment(hc_spec_fit) |>
  pluck(".cluster")

length(which(assigned_clusteres == "Cluster_1"))


# add cluster asignment after last colum of meta data
data <- meta_data_seleted_trancripts |>
  mutate(
    hc_cluster = assigned_clusteres,
    .after = survival
  )



```

## Save augmented data

```{r}
# Save as .tsv file
write_tsv(
  data,
  here("data/03_dat_augment.tsv")
)
```
